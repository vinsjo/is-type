{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["export type typeValidator = (x: any) => boolean;\nexport type typeChecker = (...values: any[]) => boolean;\n\n/** Create typeChecker function */\nconst createTypeChecker = (validatorFn: typeValidator): typeChecker => {\n\treturn (...values) => values.every(validatorFn);\n};\n/** Check if value(s) are of type 'number' and not NaN */\nconst isNum = createTypeChecker(\n\t(x) => typeof x === 'number' && !Number.isNaN(x)\n);\n/** Check if value(s) are of type 'number', not NaN and integer value(s) */\nconst isInt = createTypeChecker(\n\t(x) => typeof x === 'number' && !Number.isNaN(x) && x % 1 === 0\n);\n/** Check if value(s) are of type 'number', not NaN and float value(s) */\nconst isFloat = createTypeChecker(\n\t(x) => typeof x === 'number' && !Number.isNaN(x) && x % 1 !== 0\n);\n/** Check if value(s) are of type 'string' */\nconst isStr = createTypeChecker((x) => typeof x === 'string');\n/** Check if value(s) are of type 'boolean' */\nconst isBool = createTypeChecker((x) => typeof x === 'boolean');\n/** Check if value(s) are of type 'object' and instance(s) of Object constructor */\nconst isObj = createTypeChecker(\n\t(x) => typeof x === 'object' && x instanceof Object\n);\n/** Check if value(s) are array(s), (uses Array.isArray) */\nconst isArr = createTypeChecker(Array.isArray);\n/** Check if value(s) are of type 'function' */\nconst isFn = createTypeChecker((x) => typeof x === 'function');\n/** Check if value(s) are equal to null */\nconst isNull = createTypeChecker((x) => x === null);\n/** Check if value(s) are undefined */\nconst isUndef = createTypeChecker((x) => typeof x === 'undefined');\n/** Check if value(s) are Date objects */\nconst isDate = createTypeChecker((x) => x instanceof Date);\n/** Check if value(s) are valid Date objects */\nconst isValidDate = createTypeChecker(\n\t(x) => x instanceof Date && !isNaN(Number(x))\n);\n/** Check if value(s) are \"truthy\" */\nconst isTruthy = createTypeChecker((x) => !!x);\n/** Check if value(s) are \"falsy\" */\nconst isFalsy = createTypeChecker((x) => !x);\nexport {\n\tcreateTypeChecker,\n\tisNum,\n\tisInt,\n\tisFloat,\n\tisStr,\n\tisBool,\n\tisObj,\n\tisArr,\n\tisFn,\n\tisNull,\n\tisUndef,\n\tisDate,\n\tisValidDate,\n\tisTruthy,\n\tisFalsy,\n};\n"],"names":["createTypeChecker","validatorFn","values","every","isNum","x","Number","isNaN","isInt","isFloat","isStr","isBool","isObj","Object","isArr","Array","isArray","isFn","isNull","isUndef","isDate","Date","isValidDate","isTruthy","isFalsy"],"mappings":"AAIMA,MAAAA,EAAqBC,GACnB,IAAIC,IAAWA,EAAOC,MAAMF,GAG9BG,EAAQJ,EACZK,GAAmB,iBAANA,IAAmBC,OAAOC,MAAMF,IAGzCG,EAAQR,EACZK,GAAmB,iBAANA,IAAmBC,OAAOC,MAAMF,IAAMA,EAAI,GAAM,GAGzDI,EAAUT,EACdK,GAAmB,iBAANA,IAAmBC,OAAOC,MAAMF,IAAMA,EAAI,GAAM,GAGzDK,EAAQV,EAAmBK,GAAmB,iBAANA,GAExCM,EAASX,EAAmBK,GAAmB,kBAANA,GAEzCO,EAAQZ,EACZK,GAAmB,iBAANA,GAAkBA,aAAaQ,QAGxCC,EAAQd,EAAkBe,MAAMC,SAEhCC,EAAOjB,EAAmBK,GAAmB,mBAANA,GAEvCa,EAASlB,EAAmBK,GAAY,OAANA,GAElCc,EAAUnB,EAAmBK,QAAmB,IAANA,GAE1Ce,EAASpB,EAAmBK,GAAMA,aAAagB,MAE/CC,EAActB,EAClBK,GAAMA,aAAagB,OAASd,MAAMD,OAAOD,KAGrCkB,EAAWvB,EAAmBK,KAAQA,GAEtCmB,EAAUxB,EAAmBK,IAAOA"}