{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["export type typeValidator = (x: any) => boolean;\nexport type typeChecker = (...values: any[]) => boolean;\n\n/** Create typeChecker function */\nconst createTypeChecker = (validatorFn: typeValidator): typeChecker => {\n\treturn (...values) =>\n\t\tvalues.length > 0 && values.every((x) => validatorFn(x));\n};\n/** Check if value(s) are of type 'number' and not NaN */\nconst isNum = createTypeChecker(\n\t(x) => typeof x === 'number' && !Number.isNaN(x)\n);\n/** Check if value(s) are of type 'number', not NaN and integer value(s) */\nconst isInt = createTypeChecker(\n\t(x) => typeof x === 'number' && !Number.isNaN(x) && x % 1 === 0\n);\n/** Check if value(s) are of type 'number', not NaN and float value(s) */\nconst isFloat = createTypeChecker(\n\t(x) => typeof x === 'number' && !Number.isNaN(x) && x % 1 !== 0\n);\n/** Check if value(s) are of type 'string' */\nconst isStr = createTypeChecker((x) => typeof x === 'string');\n/** Check if value(s) are of type 'boolean' */\nconst isBool = createTypeChecker((x) => typeof x === 'boolean');\n/** Check if value(s) are of type 'object' and instance(s) of Object constructor */\nconst isObj = createTypeChecker(\n\t(x) => typeof x === 'object' && x instanceof Object\n);\n/** Check if value(s) are array(s), (uses Array.isArray) */\nconst isArr = createTypeChecker(Array.isArray);\n/** Check if value(s) are of type 'function' */\nconst isFn = createTypeChecker((x) => typeof x === 'function');\n/** Check if value(s) are equal to null */\nconst isNull = createTypeChecker((x) => x === null);\n/** Check if value(s) are undefined */\nconst isUndef = createTypeChecker((x) => typeof x === 'undefined');\n/** Check if value(s) are Date objects */\nconst isDate = createTypeChecker((x) => x instanceof Date);\n/** Check if value(s) are valid Date objects */\nconst isValidDate = createTypeChecker(\n\t(x) => x instanceof Date && !isNaN(Number(x))\n);\n/** Check if value(s) are \"truthy\" */\nconst isTruthy = createTypeChecker((x) => !!x);\n/** Check if value(s) are \"falsy\" */\nconst isFalsy = createTypeChecker((x) => !x);\nexport {\n\tcreateTypeChecker,\n\tisNum,\n\tisInt,\n\tisFloat,\n\tisStr,\n\tisBool,\n\tisObj,\n\tisArr,\n\tisFn,\n\tisNull,\n\tisUndef,\n\tisDate,\n\tisValidDate,\n\tisTruthy,\n\tisFalsy,\n};\n"],"names":["createTypeChecker","validatorFn","values","length","every","x","isNum","Number","isNaN","isInt","isFloat","isStr","isBool","isObj","Object","isArr","Array","isArray","isFn","isNull","isUndef","isDate","Date","isValidDate","isTruthy","isFalsy"],"mappings":"AAIMA,IAAAA,EAAoB,SAACC,GAC1B,sBAAWC,kCACVA,EAAOC,OAAS,GAAKD,EAAOE,MAAM,SAACC,UAAMJ,EAAYI,EAAnB,EAD5B,CAEP,EAEKC,EAAQN,EACb,SAACK,SAAmB,iBAANA,IAAmBE,OAAOC,MAAMH,EAA9C,GAGKI,EAAQT,EACb,SAACK,SAAmB,iBAANA,IAAmBE,OAAOC,MAAMH,IAAMA,EAAI,GAAM,CAA9D,GAGKK,EAAUV,EACf,SAACK,SAAmB,iBAANA,IAAmBE,OAAOC,MAAMH,IAAMA,EAAI,GAAM,CAA9D,GAGKM,EAAQX,EAAkB,SAACK,SAAmB,iBAANA,CAAd,GAE1BO,EAASZ,EAAkB,SAACK,SAAmB,kBAANA,CAAd,GAE3BQ,EAAQb,EACb,SAACK,SAAmB,iBAANA,GAAkBA,aAAaS,MAA7C,GAGKC,EAAQf,EAAkBgB,MAAMC,SAEhCC,EAAOlB,EAAkB,SAACK,SAAmB,mBAANA,CAAd,GAEzBc,EAASnB,EAAkB,SAACK,UAAY,OAANA,CAAP,GAE3Be,EAAUpB,EAAkB,SAACK,eAAmB,IAANA,CAAd,GAE5BgB,EAASrB,EAAkB,SAACK,UAAMA,aAAaiB,IAApB,GAE3BC,EAAcvB,EACnB,SAACK,UAAMA,aAAaiB,OAASd,MAAMD,OAAOF,GAA1C,GAGKmB,EAAWxB,EAAkB,SAACK,WAAQA,CAAT,GAE7BoB,EAAUzB,EAAkB,SAACK,UAAOA,CAAR"}