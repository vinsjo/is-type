{"version":3,"file":"index.cjs","sources":["../src/typeChecker.js","../src/index.js"],"sourcesContent":["/**\n * Create a type-checker function.\n * Returns a function that accepts any number of values and returns\n * true if all values result in a truthy return value when passed to the\n * 'checkerCallback' function\n *\n * @param {Function} testerFunction\n *\n * @example\n * const isStr = createTypeChecker((x) => typeof x === 'string');\n * isStr('Hello');\n * // => true\n * isStr('Hello', 'World');\n * // => true\n * isStr(1);\n * // => false\n * isStr('Hello', 1);\n * // => false\n */\nfunction createTypeChecker(testerFunction) {\n\treturn (...values) => values.every(testerFunction);\n}\n\nexport { createTypeChecker };\n","import { createTypeChecker } from './typeChecker';\n\n/** Check if value(s) are of type 'number' and not NaN */\nconst isNum = createTypeChecker(x => typeof x === 'number' && !Number.isNaN(x));\n/** Check if value(s) are of type 'number', not NaN and integer value(s) */\nconst isInt = createTypeChecker(\n\tx => typeof x === 'number' && !Number.isNaN(x) && x % 1 === 0\n);\n/** Check if value(s) are of type 'number', not NaN and float value(s) */\nconst isFloat = createTypeChecker(\n\tx => typeof x === 'number' && !Number.isNaN(x) && x % 1 !== 0\n);\n/** Check if value(s) are of type 'string' */\nconst isStr = createTypeChecker(x => typeof x === 'string');\n/** Check if value(s) are of type 'boolean' */\nconst isBool = createTypeChecker(x => typeof x === 'boolean');\n/** Check if value(s) are of type 'object' and instance(s) of Object constructor */\nconst isObj = createTypeChecker(\n\tx => typeof x === 'object' && x instanceof Object\n);\n/** Check if value(s) are array(s), (uses Array.isArray) */\nconst isArr = createTypeChecker(Array.isArray);\n/** Check if value(s) are of type 'function' */\nconst isFn = createTypeChecker(x => typeof x === 'function');\n/** Check if value(s) are equal to null */\nconst isNull = createTypeChecker(x => x === null);\n/** Check if value(s) are undefined */\nconst isUndef = createTypeChecker(x => typeof x === 'undefined');\n\nexport {\n\tcreateTypeChecker,\n\tisNum,\n\tisInt,\n\tisFloat,\n\tisStr,\n\tisBool,\n\tisObj,\n\tisArr,\n\tisFn,\n\tisNull,\n\tisUndef,\n};\n"],"names":["createTypeChecker","testerFunction","every","isNum","x","Number","isNaN","isInt","isFloat","isStr","isBool","isObj","Object","isArr","Array","isArray","isFn","isNull","isUndef"],"mappings":"AAmBA,SAASA,EAAkBC,GAC1B,wBAAsB,yBAAOC,MAAMD,ICjB9BE,IAAAA,EAAQH,EAAkB,SAAAI,SAAkB,iBAANA,IAAmBC,OAAOC,MAAMF,KAEtEG,EAAQP,EACb,SAAAI,SAAkB,iBAANA,IAAmBC,OAAOC,MAAMF,IAAMA,EAAI,GAAM,IAGvDI,EAAUR,EACf,SAAAI,SAAkB,iBAANA,IAAmBC,OAAOC,MAAMF,IAAMA,EAAI,GAAM,IAGvDK,EAAQT,EAAkB,SAAAI,SAAkB,iBAANA,IAEtCM,EAASV,EAAkB,SAAAI,SAAkB,kBAANA,IAEvCO,EAAQX,EACb,SAAAI,SAAkB,iBAANA,GAAkBA,aAAaQ,SAGtCC,EAAQb,EAAkBc,MAAMC,SAEhCC,EAAOhB,EAAkB,SAAAI,SAAkB,mBAANA,IAErCa,EAASjB,EAAkB,SAAAI,UAAW,OAANA,IAEhCc,EAAUlB,EAAkB,SAAAI,eAAkB,IAANA"}