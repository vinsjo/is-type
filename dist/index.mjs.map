{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["export type ValidatorCallback = (x: any) => boolean;\nexport type Validator = (...args: any[]) => ReturnType<ValidatorCallback>;\n\n/** Create typeChecker function */\nexport const createTypeChecker = (callback: ValidatorCallback): Validator => {\n\treturn (...args: any[]) =>\n\t\targs.length === 0\n\t\t\t? false\n\t\t\t: args.length === 1\n\t\t\t? callback(args[0])\n\t\t\t: args.every((x) => callback(x));\n};\n/** Check if value(s) are of type 'number' and not NaN */\nexport const isNum = createTypeChecker(\n\t(x) => typeof x === 'number' && !Number.isNaN(x)\n);\n/** Check if value(s) are of type 'number',\n * smaller than Infinity, larger than -Infinity and not NaN\n */\nexport const isFinite = createTypeChecker(\n\t(x) =>\n\t\ttypeof x === 'number' &&\n\t\tx < Infinity &&\n\t\tx > -Infinity &&\n\t\t!Number.isNaN(x)\n);\n/** Check if value(s) are of type 'number', not NaN and integer value(s) */\nexport const isInt = createTypeChecker(\n\t(x) => typeof x === 'number' && !Number.isNaN(x) && x % 1 === 0\n);\n/** Check if value(s) are of type 'number', not NaN and float value(s) */\nexport const isFloat = createTypeChecker(\n\t(x) => typeof x === 'number' && !Number.isNaN(x) && x % 1 !== 0\n);\n/** Check if value(s) are of type 'string' */\nexport const isStr = createTypeChecker((x) => typeof x === 'string');\n/** Check if value(s) are of type 'boolean' */\nexport const isBool = createTypeChecker((x) => typeof x === 'boolean');\n/** Check if value(s) are of type 'object' and instance(s) of Object export constructor */\nexport const isObj = createTypeChecker(\n\t(x) => typeof x === 'object' && x instanceof Object\n);\n/** Check if value(s) are array(s), (uses Array.isArray) */\nexport const isArr = createTypeChecker(Array.isArray);\n/** Check if value(s) are of type 'function' */\nexport const isFn = createTypeChecker((x) => typeof x === 'function');\n/** Check if value(s) are equal to null */\nexport const isNull = createTypeChecker((x) => x === null);\n/** Check if value(s) are undefined */\nexport const isUndef = createTypeChecker((x) => typeof x === 'undefined');\n/** Check if value(s) are Date objects */\nexport const isDate = createTypeChecker((x) => x instanceof Date);\n/** Check if value(s) are valid Date objects */\nexport const isValidDate = createTypeChecker(\n\t(x) => x instanceof Date && !isNaN(Number(x))\n);\n/** Check if value(s) are \"truthy\" */\nexport const isTruthy = createTypeChecker((x) => !!x);\n/** Check if value(s) are \"falsy\" */\nexport const isFalsy = createTypeChecker((x) => !x);\n"],"names":["createTypeChecker","callback","args","length","every","x","isNum","Number","isNaN","isFinite","Infinity","isInt","isFloat","isStr","isBool","isObj","Object","isArr","Array","isArray","isFn","isNull","isUndef","isDate","Date","isValidDate","isTruthy","isFalsy"],"mappings":"AAIaA,IAAAA,EAAoB,SAACC,GACjC,sBAAWC,kCACM,IAAhBA,EAAKC,SAEc,IAAhBD,EAAKC,OACLF,EAASC,EAAK,IACdA,EAAKE,MAAM,SAACC,UAAMJ,EAASI,EAAhB,GALR,CAMP,EAEYC,EAAQN,EACpB,SAACK,SAAmB,iBAANA,IAAmBE,OAAOC,MAAMH,EAA9C,GAKYI,EAAWT,EACvB,SAACK,SACa,iBAANA,GACPA,EAAIK,UACJL,GAAKK,WACJH,OAAOC,MAAMH,EAJf,GAOYM,EAAQX,EACpB,SAACK,SAAmB,iBAANA,IAAmBE,OAAOC,MAAMH,IAAMA,EAAI,GAAM,CAA9D,GAGYO,EAAUZ,EACtB,SAACK,SAAmB,iBAANA,IAAmBE,OAAOC,MAAMH,IAAMA,EAAI,GAAM,CAA9D,GAGYQ,EAAQb,EAAkB,SAACK,SAAmB,iBAANA,CAAd,GAE1BS,EAASd,EAAkB,SAACK,SAAmB,kBAANA,CAAd,GAE3BU,EAAQf,EACpB,SAACK,SAAmB,iBAANA,GAAkBA,aAAaW,MAA7C,GAGYC,EAAQjB,EAAkBkB,MAAMC,SAEhCC,EAAOpB,EAAkB,SAACK,SAAmB,mBAANA,CAAd,GAEzBgB,EAASrB,EAAkB,SAACK,UAAY,OAANA,CAAP,GAE3BiB,EAAUtB,EAAkB,SAACK,eAAmB,IAANA,CAAd,GAE5BkB,EAASvB,EAAkB,SAACK,UAAMA,aAAamB,IAApB,GAE3BC,EAAczB,EAC1B,SAACK,UAAMA,aAAamB,OAAShB,MAAMD,OAAOF,GAA1C,GAGYqB,EAAW1B,EAAkB,SAACK,WAAQA,CAAT,GAE7BsB,EAAU3B,EAAkB,SAACK,UAAOA,CAAR"}